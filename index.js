require("dotenv").config();
const { Telegraf } = require("telegraf");
const { MongoClient, ObjectId } = require("mongodb");

const TOKEN = process.env.TOKEN;
const url = process.env.MONGODB_URL;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

const bot = new Telegraf(TOKEN);
const client = new MongoClient(url);

const priceList = [
  { duration: "1 –º–µ—Å—è—Ü", cost: 140, callback_data: "buy_policy_1_month" },
  { duration: "3 –º–µ—Å—è—Ü–∞", cost: 390, callback_data: "buy_policy_3_months" },
];

let canAnswer = false;

client
  .connect()
  .then(() => {
    console.log("Connected to MongoDB");

    const db = client.db("car_insurance");
    const usersCollection = db.collection("users");
    const carsCollection = db.collection("cars");

    const userStates = new Map();

    function formatDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      return `${day}.${month}.${year}`;
    }

    function getStartDate() {
      return new Date();
    }

    function getExpirationDate(startDate, monthsDuration) {
      const expirationDate = new Date(startDate);
      expirationDate.setMonth(expirationDate.getMonth() + monthsDuration);
      return expirationDate;
    }

    async function myGarage(ctx) {
      const userId = ctx.from.id;
      const user = await usersCollection.findOne({ id: userId });

      if (user) {
        ctx.reply(
          `–ú–æ–π –≥–∞—Ä–∞–∂ üöò \n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}\n–ë–∞–ª–∞–Ω—Å: ${user.balance} PLN`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "add_car" }],
                [{ text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: "add_balance" }],
              ],
            },
          }
        );

        const cars = await carsCollection.find({ user_id: userId }).toArray();
        cars.forEach((car) => {
          ctx.reply(`üöô ${car.car_info}`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–∏—Å—ã",
                    callback_data: `view_policies_${car._id}`,
                  },
                ],
                [
                  {
                    text: "–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                    callback_data: `delete_car_${car._id}`,
                  },
                ],
              ],
            },
          });
        });
      } else {
        await usersCollection.insertOne({
          id: userId,
          username: ctx.from.username,
          balance: 0,
        });
        ctx.reply("–í–∞—à –≥–∞—Ä–∞–∂ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "add_car" }],
            ],
          },
        });
      }
      canAnswer = true;
    }

    function addBalance(ctx) {
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "Blik –Ω–∞ –Ω–æ–º–µ—Ä üì±", callback_data: "blik_phone" }],
            [
              {
                text: "–ë—ã—Å—Ç—Ä—ã–π –±–∞–Ω–∫–æ–≤–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ üè¶",
                callback_data: "bank_iban",
              },
            ],
          ],
        },
      });
    }

    async function createPolis(ctx) {
      const userId = ctx.from.id;
      const cars = await carsCollection.find({ user_id: userId }).toArray();

      if (cars.length === 0) {
        ctx.reply("–í–∞—à –≥–∞—Ä–∞–∂ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "add_car" }],
            ],
          },
        });
      } else {
        const buttons = cars.map((car) => [
          {
            text: `–í—ã–±—Ä–∞—Ç—å: ${car.car_info}`,
            callback_data: `select_car_${car._id}`,
          },
        ]);
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–ª–∏—Å–∞:", {
          reply_markup: {
            inline_keyboard: buttons,
          },
        });
      }
      canAnswer = true;
    }

    function support(ctx) {
      ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @vlcontact");
      canAnswer = true;
    }

    function aboutUs(ctx) {
      ctx.reply(
        `–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –∏ –≥–∏–±–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ù–∞—à–∞ —Ü–µ–ª—å - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å—Ä–æ–∫. –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:

- –ì–∏–±–∫–∏–µ —Å—Ä–æ–∫–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 3 –º–µ—Å—è—Ü–µ–≤.
- –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–∏—Å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.
- –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –Ω–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–µ–π.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º.

–û—Ñ–æ—Ä–º–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –±—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", callback_data: "create_polis" }],
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöô", callback_data: "add_car" }],
            ],
          },
        }
      );
      canAnswer = true;
    }

    function start(ctx) {
      userStates.delete(ctx.from.id);
      ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ª–∏—Å –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          reply_markup: {
            keyboard: [
              [{ text: "–ú–æ–π –≥–∞—Ä–∞–∂ üöò" }],
              [{ text: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üí∏" }, { text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ" }],
              [{ text: "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üßë‚Äçüíº" }, { text: "–û –Ω–∞—Å ‚ÑπÔ∏è" }],
            ],
            resize_keyboard: true,
          },
        }
      );
      canAnswer = true;
    }

    bot.start((ctx) => {
      start(ctx);
      console.log(ctx.message.text);
    });

    bot.hears("–ú–æ–π –≥–∞—Ä–∞–∂ üöò", (ctx) => {
      myGarage(ctx);
      console.log(ctx.message.text);
    });

    bot.hears("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üí∏", (ctx) => {
      addBalance(ctx);
      console.log(ctx.message.text);
    });

    bot.hears("–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", async (ctx) => {
      createPolis(ctx);
      console.log(ctx.message.text);
    });

    bot.hears("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üßë‚Äçüíº", async (ctx) => {
      support(ctx);
      console.log(ctx.message.text);
    });

    bot.hears("–û –Ω–∞—Å ‚ÑπÔ∏è", async (ctx) => {
      aboutUs(ctx);
      console.log(ctx.message.text);
    });

    ////CALLBACK_QUERY
    bot.on("callback_query", async (ctx) => {
      const data = ctx.callbackQuery.data;
      const userId = ctx.from.id;

      if (data === "add_car") {
        ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nBMW 318i ABC12345"
        );
        userStates.set(userId, "waiting_for_car_info");
      } else if (data === "add_balance") {
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "Blik –Ω–∞ –Ω–æ–º–µ—Ä üì±", callback_data: "blik_phone" }],
              [
                {
                  text: "–ë—ã—Å—Ç—Ä—ã–π –±–∞–Ω–∫–æ–≤–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ üè¶",
                  callback_data: "bank_iban",
                },
              ],
            ],
          },
        });
      } else if (data === "blik_phone") {
        ctx.reply(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä +48777777777 –≤ —Ç–∏—Ç—É–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π üÜî: ${ctx.chat.id} \n\n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ —Å–∫—Ä–∏–Ω —à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞. `
        );
      } else if (data === "bank_iban") {
        ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ PLiban.
–í —Ç–∏—Ç—É–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π üÜî: ${ctx.chat.id} \n\n–í–∞–∂–Ω–æ  üö® –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–æ–ª–≥–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—á–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ —Å–∫—Ä–∏–Ω —à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.`);
      } else if (data.startsWith("select_car_")) {
        const carId = data.split("_")[2];
        userStates.set(userId, `waiting_for_policy_duration_${carId}`);

        const buttons = priceList.map((price) => [
          {
            text: `${price.duration} - ${price.cost} PLN`,
            callback_data: `${price.callback_data}_${carId}`,
          },
        ]);

        ctx.reply("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å?", {
          reply_markup: {
            inline_keyboard: buttons,
          },
        });
      } else if (data.startsWith("buy_policy_")) {
        const parts = data.split("_");
        const duration = `${parts[2]}_${parts[3]}`;
        const carId = parts[4];
        const selectedPrice = priceList.find(
          (price) => price.callback_data === `buy_policy_${duration}`
        );
        const cost = selectedPrice ? selectedPrice.cost : null;

        if (cost === null) {
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
          return;
        }

        // Fetch the updated user data
        const user = await usersCollection.findOne({ id: userId });

        if (user.balance >= cost) {
          await usersCollection.updateOne(
            { id: userId },
            { $inc: { balance: -cost } }
          );

          const startDate = getStartDate();
          const expirationDate = getExpirationDate(
            startDate,
            parseInt(duration.split(" ")[0])
          );

          await carsCollection.updateOne(
            { _id: ObjectId.createFromHexString(carId) },
            {
              $push: {
                policies: {
                  isActive: true,
                  date_of_start: startDate,
                  date_of_expiration: expirationDate,
                },
              },
            }
          );

          const car = await carsCollection.findOne({
            _id: ObjectId.createFromHexString(carId),
          });

          ctx.reply("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–æ–ª–∏—Å.");
          ctx.reply(
            `Admin \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username} –∑–∞–∫–∞–∑–∞–ª –ø–æ–ª–∏—Å. \n–ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_info} \ncar ID: ${carId} \n–°—Ä–æ–∫ –ø–æ–ª–∏—Å–∞ –≤ –º–µ—Å—è—Ü–∞—Ö: ${duration}`
          );
          console.log(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} ID:${userId} –∑–∞–∫–∞–∑–∞–ª –ø–æ–ª–∏—Å. \n–ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_info} \ncar ID: ${carId} \n–°—Ä–æ–∫ –ø–æ–ª–∏—Å–∞ –≤ –º–µ—Å—è—Ü–∞—Ö: ${duration}`
          );
        } else {
          ctx.reply(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –≤–∞—à –±–∞–ª–∞–Ω—Å ${user.balance}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: "add_balance" }],
                ],
              },
            }
          );
        }
      } else if (data.startsWith("delete_car_")) {
        const carId = data.split("_")[2];
        const car = await carsCollection.findOne({
          _id: ObjectId.createFromHexString(carId),
        });
        await carsCollection.deleteOne({
          _id: ObjectId.createFromHexString(carId),
        });
        ctx.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${car.car_info} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –≥–∞—Ä–∞–∂–∞.`);
      } else if (data === "my_garage") {
        myGarage(ctx);
      } else if (data === "create_polis") {
        createPolis(ctx);
      } else if (data === "support") {
        support(ctx);
      } else if (data === "about_us") {
        aboutUs(ctx);
      } else if (data.startsWith("view_policies_")) {
        const carId = data.split("_")[2];
        const car = await carsCollection.findOne({
          _id: ObjectId.createFromHexString(carId),
        });

        if (car && car.policies && car.policies.length > 0) {
          car.policies.forEach((policy) => {
            const status = policy.isActive ? "–ê–∫—Ç–∏–≤–Ω—ã–π" : "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π";
            const startDate = formatDate(new Date(policy.date_of_start));
            const expirationDate = formatDate(
              new Date(policy.date_of_expiration)
            );
            ctx.reply(
              `üöô ${car.car_info} \n–°—Ç–∞—Ç—É—Å: ${status}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${startDate}\n–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${expirationDate}`
            );
          });
        } else {
          ctx.reply(`–ü–æ–ª–∏—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${car.car_info} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
        }
      }

      canAnswer = true;
    });

    bot.on("text", async (ctx) => {
      console.log(ctx.message.text);
      const userId = ctx.from.id;
      const state = userStates.get(userId);

      if (state === "waiting_for_car_info") {
        const carInfo = ctx.message.text;
        await carsCollection.insertOne({
          user_id: userId,
          car_info: carInfo,
          policies: [],
        });
        ctx.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${carInfo} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –≥–∞—Ä–∞–∂.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", callback_data: "create_polis" }],
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω üöô", callback_data: "add_car" }],
            ],
          },
        });
        userStates.delete(userId);
      } else if (ctx.text.trim() && canAnswer) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ú–æ–π –≥–∞—Ä–∞–∂ üöò", callback_data: "my_garage" }],
              [{ text: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üí∏", callback_data: "add_balance" }],
              [{ text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", callback_data: "create_polis" }],
              [{ text: "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üßë‚Äçüíº", callback_data: "support" }],
              [{ text: "–û –Ω–∞—Å ‚ÑπÔ∏è", callback_data: "about_us" }],
            ],
          },
        });
      } else if (!canAnswer && ctx.message != "/start") {
        start(ctx);
      }
    });

    const userPhotoMap = new Map(); // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π fileId –∏ userId

    bot.on("photo", async (ctx) => {
      const userId = ctx.from.id;
      const photo = ctx.message.photo.pop(); // –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é (–æ–±—ã—á–Ω–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const fileId = photo.file_id;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ fileId –∏ userId
      userPhotoMap.set(fileId, userId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –∫–∞–Ω–∞–ª
      await ctx.telegram.sendPhoto(ADMIN_CHAT_ID, fileId, {
        caption: `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.from.username} (ID: ${userId})`,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!");
    });

    bot.on("message", async (ctx) => {
      const chatId = ctx.chat.id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –æ–Ω–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
      if (chatId.toString() === ADMIN_CHAT_ID && ctx.message.reply_to_message) {
        const replyToMessage = ctx.message.reply_to_message;
        const messageText = ctx.message.text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ
        if (replyToMessage.photo) {
          const photo = replyToMessage.photo.pop(); // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
          const fileId = photo.file_id;

          // –ü–æ–ª—É—á–∞–µ–º userId, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç—Ç–æ–º—É fileId
          const userId = userPhotoMap.get(fileId);

          if (userId) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.telegram.sendMessage(
              userId,
              `–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞: ${messageText}`
            );
          } else {
            ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.");
          }
        }
      }
    });

    bot.on("document", async (ctx) => {
      const document = ctx.message.document;

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await ctx.telegram.sendDocument(
        ADMIN_CHAT_ID,
        document.file_id,
        {},
        {
          caption: `–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.username} (${ctx.from.id})`,
        }
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
      ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç!");
    });

    // Document
    // bot.on("channel_post", (ctx) => {
    //   const post = ctx.channelPost;

    //   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–æ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    //   if (post.document) {
    //     console.log("–ü–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç");
    //   } else {
    //     console.log("–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç");
    //   }
    // });

    // Send messages to users
    bot.on("channel_post", async (ctx) => {
      const post = ctx.channelPost;
      const postText = post.text.trim();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
      if (!postText) {
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.");
        return;
      }

      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const regex = /^(\d+)\s+(.+)$/;
      const match = postText.match(regex);

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
      if (!match) {
        ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.");
        return;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const chatId = match[1];
      const message = match[2];

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        await ctx.telegram.sendMessage(chatId, message);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Å ID: ${chatId}`);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å ID: ${chatId}`,
          error
        );
      }
    });

    bot.launch();
  })
  .catch((err) => {
    console.error("Failed to connect to MongoDB", err);
  });
